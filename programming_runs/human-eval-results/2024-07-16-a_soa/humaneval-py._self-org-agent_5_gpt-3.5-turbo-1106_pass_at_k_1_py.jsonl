{"name": "HumanEval_23_strlen", "language": "py", "prompt": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_23_strlen.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "strlen", "test": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n\ndef test_check():\n    check(strlen)\n\ntest_check()\n", "is_solved": true, "test_feedback": [], "solution": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    length = calculate_length(string)\n    return length\n\ndef calculate_length(string: str) ->int:\n    \"\"\" Calculate the length of a given string.\n\n    Parameters:\n    string: str - The input string.\n\n    Returns:\n    int - The length of the string.\n\n    >>> calculate_length('')\n    0\n    >>> calculate_length('abc')\n    3\n    \"\"\"\n    return len(string)\n"}
{"name": "HumanEval_89_encrypt", "language": "py", "prompt": "def encrypt(s: str) -> str:\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt('hi')\n    'lm'\n    >>> encrypt('asdfghjkl')\n    'ewhjklnop'\n    >>> encrypt('gf')\n    'kj'\n    >>> encrypt('et')\n    'ix'\n    \"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_89_encrypt.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "encrypt", "test": "def check(candidate):\n    assert candidate('hi') == 'lm'\n    assert candidate('asdfghjkl') == 'ewhjklnop'\n    assert candidate('gf') == 'kj'\n    assert candidate('et') == 'ix'\n    assert candidate('faewfawefaewg') == 'jeiajeaijeiak'\n    assert candidate('hellomyfriend') == 'lippsqcjvmirh'\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') == 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n    assert candidate('a') == 'e'\n\ndef test_check():\n    check(encrypt)\n\ntest_check()\n", "is_solved": true, "test_feedback": [], "solution": "def encrypt(s: str) ->str:\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt('hi')\n    'lm'\n    >>> encrypt('asdfghjkl')\n    'ewhjklnop'\n    >>> encrypt('gf')\n    'kj'\n    >>> encrypt('et')\n    'ix'\n    \"\"\"\n    encrypted_string = ''\n    for char in s:\n        if char.isalpha():\n            shifted_char = chr((ord(char) - 97 + 2 * 2) % 26 + 97)\n            encrypted_string += shifted_char\n        else:\n            encrypted_string += char\n    return encrypted_string\n\n\ndef rotate_alphabet(s: str) ->str:\n    \"\"\"Rotate the alphabet in a manner such that the letters shift down by two multiplied to two places.\n\n    Parameters:\n    s: str - The input string to be encrypted.\n\n    Returns:\n    str - The encrypted string.\n\n    >>> rotate_alphabet('hi')\n    'lm'\n    >>> rotate_alphabet('asdfghjkl')\n    'ewhjklnop'\n    >>> rotate_alphabet('gf')\n    'kj'\n    >>> rotate_alphabet('et')\n    'ix'\n    \"\"\"\n    result = ''\n    for char in s:\n        if char.isalpha():\n            shifted = ord(char) + 2 * 2\n            if char.islower():\n                if shifted > ord('z'):\n                    shifted -= 26\n            elif shifted > ord('Z'):\n                shifted -= 26\n            result += chr(shifted)\n        else:\n            result += char\n    return result\n"}
{"name": "HumanEval_95_check_dict_case", "language": "py", "prompt": "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_95_check_dict_case.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_dict_case", "test": "def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n", "is_solved": true, "test_feedback": [], "solution": "def check_dict_case(dict: Dict[str, str]) ->bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> check_dict_case({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    if not dict:\n        return False\n    return check_keys_case(dict)\n\n\ndef check_keys_case(dict: Dict[str, str]) ->bool:\n    \"\"\"\n    Check if all keys in the dictionary are either all in lower case or all in upper case.\n    If any non-string key is found, return False.\n\n    Parameters:\n    dict: Dict[str, str] - A dictionary with string keys.\n\n    Returns:\n    bool - True if all keys are strings in lower case or all keys are strings in upper case, else False.\n\n    >>> check_keys_case({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> check_keys_case({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> check_keys_case({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> check_keys_case({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> check_keys_case({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    keys = list(dict.keys())\n    return all(isinstance(key, str) for key in keys) and (all(key.islower() for\n        key in keys) or all(key.isupper() for key in keys))\n"}
{"name": "HumanEval_85_add", "language": "py", "prompt": "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n    \"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_85_add.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "add", "test": "def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n", "is_solved": false, "test_feedback": [], "solution": "def add(lst: List[int]) ->int:\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n    \"\"\"\n    if not lst:\n        return 0\n    even_elements = get_even_elements_at_odd_indices(lst)\n    total = sum(even_elements)\n    return total\n\n\ndef get_even_elements_at_odd_indices(lst: List[int]) ->List[int]:\n    \"\"\"Get the even elements that are at odd indices in the given list of integers.\n\n    Parameters:\n    lst: List[int] - A list of integers.\n\n    Returns:\n    List[int] - A list of even elements at odd indices.\n\n    Examples:\n    >>> get_even_elements_at_odd_indices([4, 2, 6, 7])\n    [2]\n    \"\"\"\n    return [lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0]\n\n\ndef add_even_elements(lst: List[int]) ->int:\n    \"\"\"Add the even elements in the given list of integers.\n\n    Parameters:\n    lst: List[int] - A list of integers.\n\n    Returns:\n    int - The sum of even elements in the list.\n    \"\"\"\n    return sum([num for num in lst if num % 2 == 0])\n\n\ndef add(lst: List[int]) ->int:\n    \"\"\"Add the elements in the given list of integers.\n\n    Parameters:\n    lst: List[int] - A list of integers.\n\n    Returns:\n    int - The sum of elements in the list.\n    \"\"\"\n    if not lst:\n        return 0\n    return sum(lst)\n\n\ndef add_even_elements(numbers: List[int]) ->int:\n    \"\"\"Calculates the sum of even elements at odd indices in a given list of integers.\n\n    Parameters:\n    numbers: List[int] - A list of integers.\n\n    Returns:\n    int - The sum of even elements at odd indices in the list.\n\n    Examples:\n    >>> add_even_elements([1, 2, 3, 4, 5, 6])\n    6\n    \"\"\"\n    even_elements_at_odd_indices = [num for i, num in enumerate(numbers[1::\n        2]) if num % 2 == 0]\n    return sum(even_elements_at_odd_indices)\n"}
{"name": "HumanEval_140_fix_spaces", "language": "py", "prompt": "def fix_spaces(text: str) -> str:\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(' Example')\n    'Example'\n    >>> fix_spaces(' Example 1')\n    'Example_1'\n    >>> fix_spaces(' Example 2')\n    '_Example_2'\n    >>> fix_spaces(' Example 3')\n    '_Example-3'\n    \"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_140_fix_spaces.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "fix_spaces", "test": "def check(candidate):\n    assert candidate('Example') == 'Example'\n    assert candidate('Mudasir Hanif ') == 'Mudasir_Hanif_'\n    assert candidate('Yellow Yellow  Dirty  Fellow') == 'Yellow_Yellow__Dirty__Fellow'\n    assert candidate('Exa   mple') == 'Exa-mple'\n    assert candidate('   Exa 1 2 2 mple') == '-Exa_1_2_2_mple'\n\ndef test_check():\n    check(fix_spaces)\n\ntest_check()\n", "is_solved": false, "test_feedback": [], "solution": "import re\n\n\ndef replace_consecutive_spaces(text: str) ->str:\n    \"\"\"\n    Replace consecutive spaces with a single underscore and handle trailing spaces.\n    \"\"\"\n    return re.sub('\\\\s+', '_', text).strip()\n\n\ndef replace_spaces_with_underscores(text: str) ->str:\n    \"\"\"\n    Replace all spaces in the given string with underscores.\n\n    Parameters:\n    text: str - The input string.\n\n    Returns:\n    str - The input string with spaces replaced by underscores.\n\n    >>> replace_spaces_with_underscores(' Example')\n    '_Example'\n    >>> replace_spaces_with_underscores(' Example 1')\n    '_Example_1'\n    >>> replace_spaces_with_underscores(' Example 2')\n    '_Example_2'\n    >>> replace_spaces_with_underscores(' Example 3')\n    '_Example_3'\n    \"\"\"\n    return text.replace(' ', '_')\n\n\ndef replace_consecutive_spaces(text: str) ->str:\n    \"\"\"\n    Replace all consecutive spaces in the given string with a single hyphen.\n\n    Parameters:\n    text: str - The input string.\n\n    Returns:\n    str - The input string with consecutive spaces replaced by a single hyphen.\n\n    >>> replace_consecutive_spaces(' Example')\n    'Example'\n    >>> replace_consecutive_spaces(' Example 1')\n    'Example_1'\n    >>> replace_consecutive_spaces(' Example 2')\n    '_Example_2'\n    >>> replace_consecutive_spaces(' Example 3')\n    '_Example-3'\n    >>> replace_consecutive_spaces('Example 6   ')\n    'Example-6'\n    \"\"\"\n    return '_'.join(text.split())\n"}
{"name": "HumanEval_63_fibfib", "language": "py", "prompt": "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_63_fibfib.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "fibfib", "test": "def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n", "is_solved": true, "test_feedback": [], "solution": "def fibfib(n: int) ->int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return compute_fibfib(n)\n\n\ndef compute_fibfib(n: int) ->int:\n    \"\"\"Compute the n-th element of the fibfib number sequence.\n\n    Parameters:\n    n: int - The index of the element to compute.\n\n    Returns:\n    int - The n-th element of the fibfib number sequence.\n\n    >>> compute_fibfib(3)\n    1\n    >>> compute_fibfib(5)\n    4\n    >>> compute_fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return compute_fibfib(n - 1) + compute_fibfib(n - 2) + compute_fibfib(\n            n - 3)\n"}
{"name": "HumanEval_151_double_the_difference", "language": "py", "prompt": "from typing import List\n\ndef double_the_difference(lst: List[float]) -> int:\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input list is empty, return 0.\n    \"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_151_double_the_difference.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "double_the_difference", "test": "def check(candidate):\n    assert candidate([]) == 0\n    assert candidate([5.0, 4.0]) == 25\n    assert candidate([0.1, 0.2, 0.3]) == 0\n    assert candidate([-10.0, -20.0, -30.0]) == 0\n    assert candidate([-1.0, -2.0, 8.0]) == 0\n    assert candidate([0.2, 3.0, 5.0]) == 34\n    assert candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n\ndef test_check():\n    check(double_the_difference)\n\ntest_check()\n", "is_solved": false, "test_feedback": [], "solution": "def double_the_difference(lst: List[float]) ->int:\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    If the input list is empty, return 0.\n    \"\"\"\n    valid_numbers = [num for num in lst if num > 0 and num % 2 != 0]\n    squared_odd_numbers = [(num ** 2) for num in valid_numbers]\n    total_odd = sum(squared_odd_numbers)\n    even_numbers = [num for num in lst if num > 0 and num % 2 == 0]\n    squared_even_numbers = [(num ** 2) for num in even_numbers]\n    total_even = sum(squared_even_numbers)\n    return (total_odd - total_even) * 2\n\n\ndef filter_valid_numbers(lst: List[float]) ->List[float]:\n    \"\"\"\n    Filter out negative numbers and non-integers from the input list.\n\n    Parameters:\n    lst: List[float] - A list of numbers.\n\n    Returns:\n    List[float] - A list of valid numbers (non-negative integers).\n\n    >>> filter_valid_numbers([1, 3, 2, 0])\n    [1, 3, 2, 0]\n    >>> filter_valid_numbers([-1, -2, 0])\n    [0]\n    >>> filter_valid_numbers([9, -2])\n    [9]\n    \"\"\"\n    return [num for num in lst if num >= 0]\n\n\ndef double_the_difference(numbers: List[float]) ->float:\n    \"\"\"\n    Double the difference between the maximum and minimum values in the input list.\n\n    Parameters:\n    numbers: List[float] - A list of numbers.\n\n    Returns:\n    float - Double the difference between the maximum and minimum values.\n\n    >>> double_the_difference([1, 3, 2, 0])\n    4.0\n    >>> double_the_difference([-1, -2, 0])\n    0.0\n    >>> double_the_difference([9, -2])\n    22.0\n    \"\"\"\n    odd_numbers = filter_odd_numbers(numbers)\n    if not odd_numbers:\n        return 0.0\n    else:\n        return 2 * (max(odd_numbers) - min(odd_numbers))\n\n\ndef square_numbers(lst: List[float]) ->List[float]:\n    \"\"\"\n    Square each number in the input list.\n\n    Parameters:\n    lst: List[float] - A list of numbers.\n\n    Returns:\n    List[float] - A list of squared numbers.\n\n    >>> square_numbers([1, 3, 2, 0])\n    [1, 9, 4, 0]\n    >>> square_numbers([-1, -2, 0])\n    [1, 4, 0]\n    >>> square_numbers([9, -2])\n    [81, 4]\n    \"\"\"\n    squared_nums = []\n    for num in lst:\n        if isinstance(num, int):\n            squared_nums.append(num ** 2)\n    return squared_nums\n\n\ndef calculate_sum(lst: List[float]) ->float:\n    \"\"\"\n    Calculate the sum of all numbers in the input list.\n\n    Parameters:\n    lst: List[float] - A list of numbers.\n\n    Returns:\n    float - The sum of the numbers in the list.\n    \"\"\"\n    result = 0\n    for num in lst:\n        result += num\n    return result\n"}
{"name": "HumanEval_22_filter_integers", "language": "py", "prompt": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_22_filter_integers.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "filter_integers", "test": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\ntest_check()\n", "is_solved": true, "test_feedback": [], "solution": "def filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    integers = extract_integers(values)\n    return integers\n\ndef extract_integers(values: List[Any]) ->List[int]:\n    \"\"\" Extract integers from a list of any python values\n    Parameters:\n    values: List[Any] - A list of any python values\n    \n    Returns:\n    List[int] - A list of integers extracted from the input list\n    \n    >>> extract_integers(['a', 3.14, 5])\n    [5]\n    >>> extract_integers([1, 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values if isinstance(x, int)]\n"}
